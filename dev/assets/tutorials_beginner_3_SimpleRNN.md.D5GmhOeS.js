import { _ as _export_sfc, c as createElementBlock, o as openBlock, a3 as createStaticVNode } from "./chunks/framework.Ncooqr9J.js";
const __pageData = JSON.parse('{"title":"Training a Simple LSTM","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/beginner/3_SimpleRNN.md","filePath":"tutorials/beginner/3_SimpleRNN.md","lastUpdated":null}');
const _sfc_main = { name: "tutorials/beginner/3_SimpleRNN.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="Training-a-Simple-LSTM" tabindex="-1">Training a Simple LSTM <a class="header-anchor" href="#Training-a-Simple-LSTM" aria-label="Permalink to &quot;Training a Simple LSTM {#Training-a-Simple-LSTM}&quot;">​</a></h1><p>In this tutorial we will go over using a recurrent neural network to classify clockwise and anticlockwise spirals. By the end of this tutorial you will be able to:</p><ol><li><p>Create custom Lux models.</p></li><li><p>Become familiar with the Lux recurrent neural network API.</p></li><li><p>Training using Optimisers.jl and Zygote.jl.</p></li></ol><h2 id="Package-Imports" tabindex="-1">Package Imports <a class="header-anchor" href="#Package-Imports" aria-label="Permalink to &quot;Package Imports {#Package-Imports}&quot;">​</a></h2><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ADTypes, Lux, LuxAMDGPU, LuxCUDA, JLD2, MLUtils, Optimisers, Zygote, Printf, Random,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Statistics</span></span></code></pre></div><h2 id="Dataset" tabindex="-1">Dataset <a class="header-anchor" href="#Dataset" aria-label="Permalink to &quot;Dataset {#Dataset}&quot;">​</a></h2><p>We will use MLUtils to generate 500 (noisy) clockwise and 500 (noisy) anticlockwise spirals. Using this data we will create a <code>MLUtils.DataLoader</code>. Our dataloader will give us sequences of size 2 × seq_len × batch_size and we need to predict a binary value whether the sequence is clockwise or anticlockwise.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_dataloaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; dataset_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sequence_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Create the spirals</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [MLUtils</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Datasets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make_spiral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sequence_length) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataset_size]</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Get the labels</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    labels </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vcat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], dataset_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">÷</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], dataset_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">÷</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    clockwise_spirals </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reshape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][:, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequence_length], :, sequence_length, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                         for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dataset_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">÷</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    anticlockwise_spirals </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reshape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 d[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][:, (sequence_length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], :, sequence_length, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data[((dataset_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">÷</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Float32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clockwise_spirals</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, anticlockwise_spirals</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Split the dataset</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (x_train, y_train), (x_val, y_val) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> splitobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((x_data, labels); at</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, shuffle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Create DataLoaders</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Use DataLoader to automatically minibatch and shuffle the data</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        DataLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.((x_train, y_train)); batchsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, shuffle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Don&#39;t shuffle the validation data</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        DataLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.((x_val, y_val)); batchsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, shuffle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>get_dataloaders (generic function with 1 method)</span></span></code></pre></div><h2 id="Creating-a-Classifier" tabindex="-1">Creating a Classifier <a class="header-anchor" href="#Creating-a-Classifier" aria-label="Permalink to &quot;Creating a Classifier {#Creating-a-Classifier}&quot;">​</a></h2><p>We will be extending the <code>Lux.AbstractExplicitContainerLayer</code> type for our custom model since it will contain a lstm block and a classifier head.</p><p>We pass the fieldnames <code>lstm_cell</code> and <code>classifier</code> to the type to ensure that the parameters and states are automatically populated and we don&#39;t have to define <code>Lux.initialparameters</code> and <code>Lux.initialstates</code>.</p><p>To understand more about container layers, please look at <a href="/dev/manual/interface#Container-Layer">Container Layer</a>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SpiralClassifier{L, C} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       Lux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractExplicitContainerLayer{(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:lstm_cell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:classifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lstm_cell</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">L</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    classifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>We won&#39;t define the model from scratch but rather use the <a href="/dev/api/Lux/layers#Lux.LSTMCell"><code>Lux.LSTMCell</code></a> and <a href="/dev/api/Lux/layers#Lux.Dense"><code>Lux.Dense</code></a>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SpiralClassifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(in_dims, hidden_dims, out_dims)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SpiralClassifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        LSTMCell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(in_dims </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hidden_dims), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hidden_dims </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> out_dims, sigmoid))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Main.var&quot;##225&quot;.SpiralClassifier</span></span></code></pre></div><p>We can use default Lux blocks – <code>Recurrence(LSTMCell(in_dims =&gt; hidden_dims)</code> – instead of defining the following. But let&#39;s still do it for the sake of it.</p><p>Now we need to define the behavior of the Classifier when it is invoked.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SpiralClassifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{T, 3}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, st</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T}</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # First we will have to run the sequence through the LSTM Cell</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # The first call to LSTM Cell will create the initial hidden state</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # See that the parameters and states are automatically populated into a field called</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # `lstm_cell` We use `eachslice` to get the elements in the sequence without copying,</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # and `Iterators.peel` to split out the first element for LSTM initialization.</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x_init, x_rest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Iterators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">peel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Lux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_eachslice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (y, carry), st_lstm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lstm_cell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_init, ps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lstm_cell, st</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lstm_cell)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Now that we have the hidden state and memory in `carry` we will pass the input and</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # `carry` jointly</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x_rest</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (y, carry), st_lstm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lstm_cell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((x, carry), ps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lstm_cell, st_lstm)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # After running through the sequence we will pass the output through the classifier</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y, st_classifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">classifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, ps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">classifier, st</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">classifier)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Finally remember to create the updated state</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(st, (classifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">st_classifier, lstm_cell</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">st_lstm))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y), st</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h2 id="Using-the-@compact-API" tabindex="-1">Using the <code>@compact</code> API <a class="header-anchor" href="#Using-the-@compact-API" aria-label="Permalink to &quot;Using the `@compact` API {#Using-the-@compact-API}&quot;">​</a></h2><p>We can also define the model using the <a href="/dev/api/Lux/utilities#Lux.@compact"><code>Lux.@compact</code></a> API, which is a more concise way of defining models. This macro automatically handles the boilerplate code for you and as such we recommend this way of defining custom layers</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SpiralClassifierCompact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(in_dims, hidden_dims, out_dims)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lstm_cell </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LSTMCell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(in_dims </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hidden_dims)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    classifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hidden_dims </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> out_dims, sigmoid)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @compact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; lstm_cell, classifier) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{T, 3}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        x_init, x_rest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Iterators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">peel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Lux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_eachslice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        y, carry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> lstm_cell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_init)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x_rest</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            y, carry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> lstm_cell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((x, carry))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        end</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">classifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>SpiralClassifierCompact (generic function with 1 method)</span></span></code></pre></div><h2 id="Defining-Accuracy,-Loss-and-Optimiser" tabindex="-1">Defining Accuracy, Loss and Optimiser <a class="header-anchor" href="#Defining-Accuracy,-Loss-and-Optimiser" aria-label="Permalink to &quot;Defining Accuracy, Loss and Optimiser {#Defining-Accuracy,-Loss-and-Optimiser}&quot;">​</a></h2><p>Now let&#39;s define the binarycrossentropy loss. Typically it is recommended to use <code>logitbinarycrossentropy</code> since it is more numerically stable, but for the sake of simplicity we will use <code>binarycrossentropy</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xlogy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ifelse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">iszero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result), result)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> binarycrossentropy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_pred, y_true)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y_pred </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y_pred </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">eltype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_pred))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">xlogy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_true, y_pred) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xlogy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y_true, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y_pred))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compute_loss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, ps, st, (x, y))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y_pred, st </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, ps, st)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> binarycrossentropy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_pred, y), st, (; y_pred</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y_pred)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_pred, y_true) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((y_pred </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y_true)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accuracy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_pred, y_true) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_pred, y_true) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_pred)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>accuracy (generic function with 1 method)</span></span></code></pre></div><h2 id="Training-the-Model" tabindex="-1">Training the Model <a class="header-anchor" href="#Training-the-Model" aria-label="Permalink to &quot;Training the Model {#Training-the-Model}&quot;">​</a></h2><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model_type)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Get the dataloaders</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (train_loader, val_loader) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_dataloaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Create the model</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> model_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rng </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Xoshiro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gpu_device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    train_state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Lux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Experimental</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TrainState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rng, model, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Adam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.01f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); transform_variables</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> epoch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Train the model</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x, y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> train_loader</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dev</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dev</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            gs, loss, _, train_state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Lux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Experimental</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compute_gradients</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                AutoZygote</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), compute_loss, (x, y), train_state)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            train_state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Lux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Experimental</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply_gradients</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(train_state, gs)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            @printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Epoch [%3d]: Loss %4.5f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> epoch loss</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        end</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Validate the model</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        st_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Lux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">testmode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(train_state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">states)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x, y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val_loader</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dev</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dev</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            loss, st_, ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compute_loss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, train_state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parameters, st_, (x, y))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            acc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> accuracy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y_pred, y)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            @printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Validation: Loss %4.5f Accuracy %4.5f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loss acc</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        end</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (train_state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parameters, train_state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">states) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cpu_device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ps_trained, st_trained </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SpiralClassifier)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Epoch [  1]: Loss 0.56217</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.51101</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.47981</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.44398</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.42687</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.40554</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.40969</span></span>\n<span class="line"><span>Validation: Loss 0.35935 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.36630 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.37403</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.34611</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.32942</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.32507</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.30236</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.29027</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.26812</span></span>\n<span class="line"><span>Validation: Loss 0.25409 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.25743 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.25967</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.24364</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.23436</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.22203</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.21131</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.20120</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.19984</span></span>\n<span class="line"><span>Validation: Loss 0.17914 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.18049 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.18274</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.17358</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.16529</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.15630</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.14978</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.14289</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.13673</span></span>\n<span class="line"><span>Validation: Loss 0.12912 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.12960 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.12959</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.12495</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.11942</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.11397</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.11002</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.10323</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.09776</span></span>\n<span class="line"><span>Validation: Loss 0.09380 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.09449 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.09498</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.09006</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.08742</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.08425</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.07964</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.07784</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.07470</span></span>\n<span class="line"><span>Validation: Loss 0.06855 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.06965 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.06959</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.06676</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.06602</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.06232</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.06034</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.05649</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.05767</span></span>\n<span class="line"><span>Validation: Loss 0.05066 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.05193 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.05137</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04975</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04888</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04824</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04506</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04305</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04238</span></span>\n<span class="line"><span>Validation: Loss 0.03774 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.03902 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03945</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03912</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03630</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03487</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03329</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03337</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03344</span></span>\n<span class="line"><span>Validation: Loss 0.02855 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.02976 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02992</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02817</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02899</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02768</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02686</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02603</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02346</span></span>\n<span class="line"><span>Validation: Loss 0.02227 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.02338 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02314</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02467</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02292</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02094</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02154</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02000</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02082</span></span>\n<span class="line"><span>Validation: Loss 0.01805 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01903 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.02000</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01845</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01936</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01849</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01695</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01677</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01661</span></span>\n<span class="line"><span>Validation: Loss 0.01512 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01599 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01613</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01638</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01541</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01527</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01532</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01529</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01271</span></span>\n<span class="line"><span>Validation: Loss 0.01304 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01381 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01442</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01411</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01348</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01347</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01300</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01271</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01338</span></span>\n<span class="line"><span>Validation: Loss 0.01150 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01219 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01208</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01275</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01190</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01196</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01196</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01139</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01193</span></span>\n<span class="line"><span>Validation: Loss 0.01027 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01090 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01141</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01189</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01099</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01032</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01082</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01009</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.00802</span></span>\n<span class="line"><span>Validation: Loss 0.00928 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00986 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.01054</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00871</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00958</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00962</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00929</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.01043</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.01213</span></span>\n<span class="line"><span>Validation: Loss 0.00846 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00900 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00914</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00858</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00891</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00923</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00864</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00907</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.01003</span></span>\n<span class="line"><span>Validation: Loss 0.00776 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00826 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00851</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00894</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00875</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00781</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00731</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00799</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00926</span></span>\n<span class="line"><span>Validation: Loss 0.00717 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00763 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00787</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00779</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00783</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00783</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00738</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00755</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00592</span></span>\n<span class="line"><span>Validation: Loss 0.00664 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00707 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00716</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00718</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00687</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00735</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00676</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00726</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00703</span></span>\n<span class="line"><span>Validation: Loss 0.00619 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00659 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00696</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00700</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00648</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00665</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00635</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00642</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00615</span></span>\n<span class="line"><span>Validation: Loss 0.00578 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00616 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00661</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00611</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00618</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00629</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00633</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00571</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00614</span></span>\n<span class="line"><span>Validation: Loss 0.00542 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00578 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00617</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00601</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00574</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00568</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00567</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00563</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00609</span></span>\n<span class="line"><span>Validation: Loss 0.00510 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00544 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00561</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00587</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00556</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00548</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00507</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00528</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00577</span></span>\n<span class="line"><span>Validation: Loss 0.00481 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00513 Accuracy 1.00000</span></span></code></pre></div><p>We can also train the compact model with the exact same code!</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ps_trained2, st_trained2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SpiralClassifierCompact)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Epoch [  1]: Loss 0.56016</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.51134</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.48200</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.44093</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.43129</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.41961</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.37541</span></span>\n<span class="line"><span>Validation: Loss 0.37024 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.36704 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.37272</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.36111</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.32899</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.31593</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.30803</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.28621</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.27590</span></span>\n<span class="line"><span>Validation: Loss 0.25943 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.25818 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.26385</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.24754</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.23409</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.22200</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.21154</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.19867</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.19864</span></span>\n<span class="line"><span>Validation: Loss 0.18123 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.18110 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.18196</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.17481</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.16496</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.15764</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.14836</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.14258</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.13906</span></span>\n<span class="line"><span>Validation: Loss 0.12975 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.12990 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.12948</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.12596</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.11989</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.11298</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.10897</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.10291</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.09969</span></span>\n<span class="line"><span>Validation: Loss 0.09468 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.09473 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.09490</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.08975</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.08779</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.08446</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.07939</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.07691</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.07435</span></span>\n<span class="line"><span>Validation: Loss 0.06998 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.06982 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.06993</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.06779</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.06251</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.06109</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.06076</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.05832</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.05783</span></span>\n<span class="line"><span>Validation: Loss 0.05230 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.05200 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.05266</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.05079</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04943</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04735</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04242</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04288</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04175</span></span>\n<span class="line"><span>Validation: Loss 0.03939 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.03905 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.04054</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03567</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03805</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03653</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03307</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03210</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03137</span></span>\n<span class="line"><span>Validation: Loss 0.03009 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.02973 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.03027</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02929</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02778</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02851</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02532</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02505</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02505</span></span>\n<span class="line"><span>Validation: Loss 0.02364 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.02328 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02389</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02436</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02201</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02100</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02072</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02052</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.01874</span></span>\n<span class="line"><span>Validation: Loss 0.01921 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01888 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01811</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01811</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01852</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01821</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01776</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01779</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01690</span></span>\n<span class="line"><span>Validation: Loss 0.01613 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01584 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01636</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01585</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01691</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01463</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01439</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01449</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01262</span></span>\n<span class="line"><span>Validation: Loss 0.01390 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01365 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01358</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01349</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01325</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01310</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01375</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01261</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01366</span></span>\n<span class="line"><span>Validation: Loss 0.01225 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01202 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01198</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01157</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01231</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01188</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01195</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01111</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01181</span></span>\n<span class="line"><span>Validation: Loss 0.01096 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01075 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01102</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01065</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01060</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01089</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01044</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01020</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.00981</span></span>\n<span class="line"><span>Validation: Loss 0.00990 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00971 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00995</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00943</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00938</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.01020</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00948</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00887</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.01108</span></span>\n<span class="line"><span>Validation: Loss 0.00903 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00885 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00943</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00875</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00905</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00887</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00837</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00832</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00867</span></span>\n<span class="line"><span>Validation: Loss 0.00828 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00812 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00888</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00827</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00830</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00786</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00801</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00748</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00702</span></span>\n<span class="line"><span>Validation: Loss 0.00765 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00750 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00766</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00777</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00758</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00743</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00735</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00731</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00653</span></span>\n<span class="line"><span>Validation: Loss 0.00710 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00695 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00691</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00678</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00721</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00652</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00711</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00726</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00665</span></span>\n<span class="line"><span>Validation: Loss 0.00662 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00648 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00673</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00709</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00616</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00659</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00662</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00596</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00570</span></span>\n<span class="line"><span>Validation: Loss 0.00619 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00606 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00635</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00600</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00605</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00630</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00555</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00627</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00587</span></span>\n<span class="line"><span>Validation: Loss 0.00581 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00569 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00549</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00559</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00591</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00583</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00550</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00585</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00606</span></span>\n<span class="line"><span>Validation: Loss 0.00546 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00535 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00567</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00565</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00534</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00517</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00526</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00535</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00473</span></span>\n<span class="line"><span>Validation: Loss 0.00515 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00505 Accuracy 1.00000</span></span></code></pre></div><h2 id="Saving-the-Model" tabindex="-1">Saving the Model <a class="header-anchor" href="#Saving-the-Model" aria-label="Permalink to &quot;Saving the Model {#Saving-the-Model}&quot;">​</a></h2><p>We can save the model using JLD2 (and any other serialization library of your choice) Note that we transfer the model to CPU before saving. Additionally, we recommend that you don&#39;t save the model</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@save</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;trained_model.jld2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {compress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} ps_trained st_trained</span></span></code></pre></div><p>Let&#39;s try loading the model</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;trained_model.jld2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ps_trained st_trained</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>2-element Vector{Symbol}:</span></span>\n<span class="line"><span> :ps_trained</span></span>\n<span class="line"><span> :st_trained</span></span></code></pre></div><h2 id="Appendix" tabindex="-1">Appendix <a class="header-anchor" href="#Appendix" aria-label="Permalink to &quot;Appendix {#Appendix}&quot;">​</a></h2><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InteractiveUtils</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">InteractiveUtils</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">versioninfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @isdefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LuxCUDA) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CUDA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">functional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); CUDA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">versioninfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @isdefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LuxAMDGPU) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LuxAMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">functional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">versioninfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Julia Version 1.10.2</span></span>\n<span class="line"><span>Commit bd47eca2c8a (2024-03-01 10:14 UTC)</span></span>\n<span class="line"><span>Build Info:</span></span>\n<span class="line"><span>  Official https://julialang.org/ release</span></span>\n<span class="line"><span>Platform Info:</span></span>\n<span class="line"><span>  OS: Linux (x86_64-linux-gnu)</span></span>\n<span class="line"><span>  CPU: 48 × AMD EPYC 7402 24-Core Processor</span></span>\n<span class="line"><span>  WORD_SIZE: 64</span></span>\n<span class="line"><span>  LIBM: libopenlibm</span></span>\n<span class="line"><span>  LLVM: libLLVM-15.0.7 (ORCJIT, znver2)</span></span>\n<span class="line"><span>Threads: 6 default, 0 interactive, 3 GC (on 2 virtual cores)</span></span>\n<span class="line"><span>Environment:</span></span>\n<span class="line"><span>  LD_LIBRARY_PATH = /usr/local/nvidia/lib:/usr/local/nvidia/lib64</span></span>\n<span class="line"><span>  JULIA_DEPOT_PATH = /root/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6</span></span>\n<span class="line"><span>  JULIA_PROJECT = /var/lib/buildkite-agent/builds/gpuci-9/julialang/lux-dot-jl/docs</span></span>\n<span class="line"><span>  JULIA_AMDGPU_LOGGING_ENABLED = true</span></span>\n<span class="line"><span>  JULIA_DEBUG = Literate</span></span>\n<span class="line"><span>  JULIA_CPU_THREADS = 2</span></span>\n<span class="line"><span>  JULIA_NUM_THREADS = 6</span></span>\n<span class="line"><span>  JULIA_LOAD_PATH = @:@v#.#:@stdlib</span></span>\n<span class="line"><span>  JULIA_CUDA_HARD_MEMORY_LIMIT = 25%</span></span>\n<span class="line"><span>  JULIA_PKG_PRECOMPILE_AUTO = 0</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>CUDA runtime 12.4, artifact installation</span></span>\n<span class="line"><span>CUDA driver 12.4</span></span>\n<span class="line"><span>NVIDIA driver 550.54.15</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>CUDA libraries: </span></span>\n<span class="line"><span>- CUBLAS: 12.4.5</span></span>\n<span class="line"><span>- CURAND: 10.3.5</span></span>\n<span class="line"><span>- CUFFT: 11.2.1</span></span>\n<span class="line"><span>- CUSOLVER: 11.6.1</span></span>\n<span class="line"><span>- CUSPARSE: 12.3.1</span></span>\n<span class="line"><span>- CUPTI: 22.0.0</span></span>\n<span class="line"><span>- NVML: 12.0.0+550.54.15</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Julia packages: </span></span>\n<span class="line"><span>- CUDA: 5.3.3</span></span>\n<span class="line"><span>- CUDA_Driver_jll: 0.8.1+0</span></span>\n<span class="line"><span>- CUDA_Runtime_jll: 0.12.1+0</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Toolchain:</span></span>\n<span class="line"><span>- Julia: 1.10.2</span></span>\n<span class="line"><span>- LLVM: 15.0.7</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Environment:</span></span>\n<span class="line"><span>- JULIA_CUDA_HARD_MEMORY_LIMIT: 25%</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>1 device:</span></span>\n<span class="line"><span>  0: NVIDIA A100-PCIE-40GB MIG 1g.5gb (sm_80, 4.391 GiB / 4.750 GiB available)</span></span>\n<span class="line"><span>┌ Warning: LuxAMDGPU is loaded but the AMDGPU is not functional.</span></span>\n<span class="line"><span>└ @ LuxAMDGPU ~/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6/packages/LuxAMDGPU/sGa0S/src/LuxAMDGPU.jl:19</span></span></code></pre></div><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>', 45);
const _hoisted_46 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_46);
}
const _3_SimpleRNN = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _3_SimpleRNN as default
};
